
Todo & misc notes
=================

******************************************************************************

+ examples
    + test02:
        - sending email notification
        - job results
        - email job status lifecycle & link to workflow
    - test03: wciscc - case file example see email
    - test04: sqd
    - test05: pennylane to IBM backend - 2 venv
    - test01: find by metadata, workflowId


+ lwfm
    + top
        - throttle background polling wait time
        - cascading metadata sheet dump
        - explicit workflow saving - lwfManager.saveWorkflow()
    - import/export (#73)
    - site.toml injection
    - submit & jobDefn take dict, list, or serialized string of either
    - metasheets/jobs by xxx (#107)
    - reverse args of put & get
    - logging provenance - workflow level, job level - how to divine the context?
    - todo items (many are for log context - separate ticket)
    - inline docs esp. for .base & .midware (#84), document keywords, pillars for metasheet search
    - slurm interop?


+ IBM site driver
    - proper job status emits
    - VSCode linting
    - unpacking qiskit results - show in qtsuite cfd
    - ibm site w qiskit run options - which besides those below?
    - notating get from IBM by doing a local put?
    - allow 1 session for many circuits
    - noise model, from backend
    - capture of current machine state
    - gpu device
    - custom pass manager steps
    - document driver


******************************************************************************

+ ornl site
    - PNLL simulator, tensor sim (see also https://github.com/tencent-quantum-lab/tensorcircuit)
    + heterogeneous scheduling    
        - strace for logging file access - output could be parsed perhaps...
        - Slurm plugins as Site, deployable in-situ - "slurm heterogeneous interop"
        - Pilot 


+ lwfm agent - general wf agent
    - "write the docs first"
    - how does the LLM track workflows, how can we mine the logging artifacts - do we trust them?
    - Google Codex use of Agents.md to understand the codebase / guardrails 
    - .base & .midware signatures for mcp wrapper - copiously document
    - mcp async abilities - how to use relative to lwfm triggers - w. example
    + qwf-agent - quantum wf agent built on lwfm agent
        - IBM 4-part quantum framework vs. more granular steps (see below)
        - e.g. swap out transpilation pipelines for target QCs
        - a2a scenario - Assistant & QA test agents? ("ai4sci", agent surfing arxiv, etc.)


+ wciscc2025
    - IBM, IQM, Quantinuum, IonQ machines w lwfm venv 
    - ibm_sherbrooke going end of life  


******************************************************************************
Design: (map to IBM 4-step process)

+ Author
    - describe circuit in language of choice (e.g. QASM, OpenQASM, etc.)
    - writes to descriptor format?

+ Pre 

+ Build (circuit_HHL.py)
    - construct circuit from description (likely Python Qiskit or matrix)
    - write to interchange format (Qpy)

+ Optimize

+ Transpile 

+ Run (solver.py)
    - reads in circuit in interchange format (Qpy)
    - transpiles / optimizes circuit (to ISA)  - is this two steps? what are ins/outs?
    - runs circuit 
    - returns results 
    + backend plugins
        - credentials (Auth)
        - libraries (Run)
        - execution (Run)
        - monitor execution (Run)
        - return results (Run)

+ Post 


******************************************************************************
installation notes for lwfm-agent

python
uv
node, npm, npx 
<my project> 
fast-agent, API key in fastagent.secrets.yaml, servers in fastagent.config.yaml 


******************************************************************************
other notes

- AFRL needs to juggle qc backends for their algorithm benchmarking w DARPA 
- lwfm roadmap - ORNL DD?
+ algorithms
    - zoo impls?
    - AFRL impls?
    - tutorials?


******************************************************************************
